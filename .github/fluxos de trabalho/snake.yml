importação javafx. cena. tela. Lona;
importação javafx. cena. tela. GráficosContexto;
importação javafx. cena. tinta. Cor;
importação javafx. cena. tinta. Pintar;

importação java. util. ArrayList;
importação java. util. Lista;

classe pública Cobra {

    cabeça de lona privada;
    grupo privado List<Canvas> body = novo ArrayList<>();
    lista privada<Integer[]> posiçãoHistory = nova ArrayList<>();

    Cobra pública(){
        criarSnake();
    }

    vazio privado criarSnake(){
        isso. cabeça = CanvasUtils. buildSquare (Cor. AZUL);
        redefinirposição();
    }

    redefinição de vazio privadoPosição(){
        isso. cabeça. setTranslateX (Config. LARGURA/2 - Config. SQUARE_SIZE);
        isso. cabeça. setTranslateY (Config. ALTURA/2 - Config. SQUARE_SIZE);
    }


    Canvas pública getHead() {
        cabeça de retorno ;
    }

    público Inteiro getPositionX(){
        retorno (int)isso. cabeça. getTranslateX();
    }

    público Inteiro getPosição(){
        retorno (int)isso. cabeça. getTranslateY();
    }

    conjunto vazio públicoPosition (Inteiro x, Inteiro y){
        isso. cabeça. conjuntoTranslateX(x);
        isso. cabeça. setTranslateY (y);

        para(int i = 0; eu<body. tamanho(); eu++){
            Corpo de lonaPart  = corpo. get (i);
            Posição inteiro=isso.  posiçãoHistória. obter (isso. posiçãoHistória. tamanho() - (i +1));
            bodyPart. setTranslateX (posição[0]]);
            bodyPart. conjuntoTranslação (posição[1]]);
        }

        isso. posiçãoHistória. adicionar (novo Inteiro[]{x,y});

        se (posiçãoHistória. tamanho () > corpo. tamanho() + 1){
            posiçãoHistória. remover(0);
        }
    }

    reset de lona pública(){
        redefinirposição();
        alterarColor (Cor. AZUL);
        isso. posiçãoHistória. claro();
        isso. corpo. claro();
        devolver isso. cabeça;
    }

    vazio público morrer(){
        alterarColor (Cor. VERMELHO);
    }

    mudança de vazio privadoColor (cor de tinta  ){
        GráficoContext gc = isso. getHead(). getGraphicsContext2D();
        gc. clearRect(0,0, Config. SQUARE_SIZE, Config. SQUARE_SIZE);
        gc. conjuntoFill (cor);
        gc. fillRect (0,0,Config. SQUARE_SIZE, Config. SQUARE_SIZE);
    }

    vazio público comer (cenário cenário){
        Corpo de lonaPart  = CanvasUtils. buildSquare (Cor. AZUL);
        cenário. adicionar (bodyPart);
        isso. corpo. adicionar (bodyPart);
    }

    cheque booleano públicoColision(Inteiro x, Inteiro y){
        para (Canvas bodyPart: isso. corpo){
            Corpo inteiroPositionX = (int)bodyPart. getTranslateX();
            Corpo inteiroPosição = (int)bodyPart. getTranslateY();
            se(x. iguais (bodyPositionX) && y. iguais (bodyPositionY)){
                retorno verdadeiro;
            }
        }

        retorno falso;
    }
}
